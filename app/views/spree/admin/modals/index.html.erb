<%= javascript_include_tag 'https://cdnjs.cloudflare.com/ajax/libs/react/0.13.1/react.js' %>
<%= javascript_include_tag 'https://cdnjs.cloudflare.com/ajax/libs/react/0.13.1/JSXTransformer.js' %>

<% content_for :page_title do %>
  Modals Generator
<% end %>

<style type="text/css">
  #modal_generator input[type=text] {
    width:100%!important;
  }
  #modal_generator label {
    margin-bottom:1rem!important;
  }
</style>

<script type="text/jsx">

  var PreviewBar = React.createClass({
    render: function() {

      var utf8_to_b64 = function utf8_to_b64( str ) {
        return window.btoa(unescape(encodeURIComponent( str )));
      };

      var knownValues = this.props.keys;
      var paramValues = this.props.parameters.map(function(param) {
        var value = knownValues[param.param];

        if (value == undefined || value == '') { return false; }

        if (param.encoded) { value = utf8_to_b64(value); }

        return param.param + "=" + value;
      }).filter(function (i) { return i });

      var param_string = "?" + paramValues.join('&');
      var previewUrl = this.props.baseUrl + param_string;

      return (
        <div>
          <h2>Preview </h2>
          <hr />
          <label>Param String</label>
          <input type="text" value={param_string} readOnly={true}/>
          <label>URI</label>
          <input type="text" value={previewUrl} readOnly={true}/>
          <label>Preview (new window)</label>
          <p>
            <a href={previewUrl} target="_blank">{previewUrl}</a>
          </p>
        </div>
      );
    }
  });


  var ParametersTable = React.createClass({
    render: function () {
      var inputHandler = this.props.onUserInput;

      return (
        <table>
          <thead>
            <tr>
              <th>Name</th>
              <th>Value</th>
            </tr>
          </thead>
          <tbody>
            {
              this.props.parameters.map(function (parameter){
                return <ParameterRow {...parameter}  onUserInput={inputHandler}/>

              })
            }
          </tbody>
        </table>
      );
    }
  });

  var ParameterRow = React.createClass({
    getInitialState: function() {
      return {value: this.props.defaultValue};
    },
    handleChange: function (event) {
      this.props.onUserInput(event.target.name, event.target.value);
    },

    render: function() {
      var placeholder = this.props.required ? 'Required' : 'Optional';

      return (
        <tr>
          <td><label>{this.props.label}</label></td>
          <td>
            <input
                    type="text"
                    name={this.props.param}
                    placeholder={placeholder}
                    defaultValue={this.props.defaultValue}
                    onChange={this.handleChange} />
          </td>
        </tr>
      )
    }
  });


  var ModalGenerator = React.createClass({
    getInitialState: function () {
      var newState = { data: this.props.parameters };
      this.props.parameters.map( function(param) {
        if (param.defaultValue !== undefined) {
          newState[param.param] = param.defaultValue
        }
      });
      return newState;
    },

    handleUserInput: function(key, value) {
      var partialState = { };
      partialState[key] = value;

      this.setState(partialState);
    },

    render: function() {
      return (
        <div className="clearfix">
            <ParametersTable parameters={this.state.data} onUserInput={this.handleUserInput}/>
            <PreviewBar parameters={this.state.data} keys={this.state} baseUrl={this.props.baseUrl}/>
        </div>
      );
    }
  });

  var PARAMS = [
    { label: "promocode",  param: "pc",  required: true,  encoded: true,  type: 'string' },
    { label: "heading",    param: "h",   required: false, encoded: true,  type: 'string' },
    { label: "message",    param: "m",   required: false, encoded: true,  type: 'string' },
    { label: "timeout",    param: "t",   required: false, encoded: false, type: 'integer', defaultValue: 2 },
    { label: "class_name", param: "s",   required: false, encoded: true,  type: 'string' },
    { label: "pop",        param: "pop", required: true,  encoded: false, type: 'boolean', defaultValue: 'true'},
    { label: "raw",        param: "raw", required: false, encoded: false, type: 'boolean'}
  ];

  var baseUrl = '<%= root_url %>';

React.render(<ModalGenerator parameters={PARAMS} baseUrl={baseUrl} />, document.getElementById('modal_generator'));
</script>

<div id="modal_generator"></div>
