ruby:
  variant = line_item.variant
  product = variant.product
  hide_remove ||= false
  show_customizations ||= false

.item
  .picture
    = link_to image_tag(line_item_image_url(line_item, :small), itemprop: "image", width: 83, height: 115, alt: product.name), collection_product_path(product)
  .info
    h6 = link_to product.name, collection_product_path(product), target: 'blank'
    .price = price_for_line_item(line_item)
    .description
      table
        tr
          td Color:
          td 
            - if show_customizations && line_item.personalization.present?
              .color style="background-color: #{line_item.personalization.color.value};"
            - else
              = variant.dress_color.try(:presentation)
        - if show_customizations && line_item.personalization.present?
          tr
            td Size:
            td = line_item.personalization.size
          - line_item.personalization.customization_values.each do |value|
            tr
              td colspan="2"
                = value.presentation
        - else
          tr
            td Size:
            td = variant.dress_size.try(:presentation)
        tr
          td Quantity:
          td = line_item.quantity  
        tr
          td Estimated Delivery:
          td = product.delivery_time_as_string
  /= link_to '#', class: 'delete remove-item-from-cart', data: { id: variant.id } do
    span.icon-close

// <!-- old html -->
/li.item-block
  .thumbnail
    = link_to small_image(product, itemprop: "image", width: 83, height: 115, alt: product.name), collection_product_path(product)
    - unless hide_remove
      = link_to 'Remove', '#', class: 'remove-item-from-cart', data: { id: variant.id }
  .item-info
    .price
      = price_for_line_item(line_item)
    .name = link_to product.name, collection_product_path(product), target: 'blank'
    - if line_item.personalization.present?
      .custom-label Custom dress
    .desc = product_short_description(product)
    ul.specs
      - if show_customizations && line_item.personalization.present?
        li
          .label Color
          .value
            .color style="background-color: #{line_item.personalization.color};"
        li
          .label Size
          .value = line_item.personalization.size
        - line_item.personalization.customization_values.each do |value|
          li
            .label = value.customisation_type.presentation
            .value = value.presentation
      - else
        li
          .label Color
          .value
            - color = variant.dress_color
            .color{class=color.try(:name)}
        li
          .label Size
          .value = variant.dress_size.try(:presentation)
      li
        .label Quantity
        .value = line_item.quantity
      li
        .label Estimated delivery
        .value = product.delivery_time_as_string
