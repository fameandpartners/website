// copied & modified from @LAMike310's ExpressMaking component of new PDP
// TO-DO: break these out into their respective partials, temp. while WIP

$c-elem-focus: rgb(51, 51, 51);
$c-white: #fff;
$c-black: #000;
$c-light-gray: #ddd;
$c-background-gray: #f5f5f5;
$c-border-gray: #d8d8d8;
$z-max: 9999;


.ReturnOption__wrapper {
  margin-left: auto;
  margin-right: auto;
  padding-left: 15px;
  padding-right: 15px;
}

.ReturnOption__content {
  background: $c-background-gray;
  border: 1px solid $c-border-gray;
  height: 75px;
  padding: 15px 0 0 0;
}

.ReturnOption__content--headline {
  font-weight: 600;
}

.Checkbox__wrapper {
  text-align: left;
}

.Checkbox {
  position: absolute; // take it out of document flow
  opacity: 0; // hide it
  margin-top: 0px !important; // to bypass conflict w/ base redesign styles
  width: 20px;
  height: 20px;
  z-index: $z-max;

  // Box hover
  &:hover + .Checkbox__label:before {
    box-shadow: 0 0 0 1px $c-elem-focus;
  }

  // Checkmark. Could be replaced with an image
  &:checked + .Checkbox__label:after {
    content: '';
    position: absolute;
    left: 5px;
    top: 9px;
    background: $c-black;
    width: 2px;
    height: 2px;
    box-shadow: 2px 0 0 $c-black,
      4px 0 0 $c-black,
      4px -2px 0 $c-black,
      4px -4px 0 $c-black,
      4px -6px 0 $c-black,
      4px -8px 0 $c-black,
      4px -9px 0 $c-black;
    transform: rotate(45deg);
  }
}

.Checkbox + .Checkbox__label {
  position: relative;
  cursor: pointer;
  padding: 0;
}

.Checkbox.disabled + .Checkbox__label {
  cursor: not-allowed;
}

.Checkbox.disabled + .Checkbox__label:before {
  box-shadow: 0 0 0 1px $c-light-gray;
}

// Box.
.Checkbox + .Checkbox__label:before {
  content: '';
  margin-right: 10px;
  display: inline-block;
  vertical-align: text-top;
  width: 20px;
  height: 20px;
  background: $c-white;
  box-shadow: 0 0 0 1px $c-light-gray;
  transition: 300ms box-shadow;
}

.js-returns-abc-option-A,
.js-returns-abc-option-B {
  display: none;
}

.sk-folding-cube {
  margin: 4px auto;
  width: 16px;
  height: 16px;
  position: relative;
  -webkit-transform: rotateZ(45deg);
          transform: rotateZ(45deg);
}

.sk-folding-cube .sk-cube {
  float: left;
  width: 50%;
  height: 50%;
  position: relative;
  -webkit-transform: scale(1.1);
      -ms-transform: scale(1.1);
          transform: scale(1.1);
}
.sk-folding-cube .sk-cube:before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #333;
  -webkit-animation: sk-foldCubeAngle 2.4s infinite linear both;
          animation: sk-foldCubeAngle 2.4s infinite linear both;
  -webkit-transform-origin: 100% 100%;
      -ms-transform-origin: 100% 100%;
          transform-origin: 100% 100%;
}
.sk-folding-cube .sk-cube2 {
  -webkit-transform: scale(1.1) rotateZ(90deg);
          transform: scale(1.1) rotateZ(90deg);
}
.sk-folding-cube .sk-cube3 {
  -webkit-transform: scale(1.1) rotateZ(180deg);
          transform: scale(1.1) rotateZ(180deg);
}
.sk-folding-cube .sk-cube4 {
  -webkit-transform: scale(1.1) rotateZ(270deg);
          transform: scale(1.1) rotateZ(270deg);
}
.sk-folding-cube .sk-cube2:before {
  -webkit-animation-delay: 0.3s;
          animation-delay: 0.3s;
}
.sk-folding-cube .sk-cube3:before {
  -webkit-animation-delay: 0.6s;
          animation-delay: 0.6s;
}
.sk-folding-cube .sk-cube4:before {
  -webkit-animation-delay: 0.9s;
          animation-delay: 0.9s;
}
@-webkit-keyframes sk-foldCubeAngle {
  0%, 10% {
    -webkit-transform: perspective(140px) rotateX(-180deg);
            transform: perspective(140px) rotateX(-180deg);
    opacity: 0;
  } 25%, 75% {
    -webkit-transform: perspective(140px) rotateX(0deg);
            transform: perspective(140px) rotateX(0deg);
    opacity: 1;
  } 90%, 100% {
    -webkit-transform: perspective(140px) rotateY(180deg);
            transform: perspective(140px) rotateY(180deg);
    opacity: 0;
  }
}

@keyframes sk-foldCubeAngle {
  0%, 10% {
    -webkit-transform: perspective(140px) rotateX(-180deg);
            transform: perspective(140px) rotateX(-180deg);
    opacity: 0;
  } 25%, 75% {
    -webkit-transform: perspective(140px) rotateX(0deg);
            transform: perspective(140px) rotateX(0deg);
    opacity: 1;
  } 90%, 100% {
    -webkit-transform: perspective(140px) rotateY(180deg);
            transform: perspective(140px) rotateY(180deg);
    opacity: 0;
  }
}
