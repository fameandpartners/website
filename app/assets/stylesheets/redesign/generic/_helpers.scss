/* [Helpers]
-------------------------------------------------------*/

/*
    This is the only chapter where the '!important' keyword should be used as these rules
    have to over-ride everything they're being appended to.
*/

// Hide from both screenreaders and browsers
.hide-fully {
  display: none!important;
  visibility: hidden!important;
}

// Hide visually and from screenreaders, but maintain layout
.hide-partially {
  visibility: hidden!important;
}

// Hide only visually, but have it available for screenreaders
.hide-visually {
  position: absolute!important;
  height: 1px!important;
  width: 1px!important;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

// truncates single line of text
.txt-truncate-1 {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// truncates block of text, NOTE: height must be set
.txt-truncate-block {
  display: block;
  overflow: hidden;
}

.text-white {
  color: $c-neutral-white !important;
}

// if you need to hide scrollbars
.no-scroll {
  overflow: hidden !important;
}

// TODO: replace this with .no-scroll
.overflow-hidden {
  overflow: hidden !important;
}

// You can extend the cfix class with SASS to avoid the `.cfix` class appearing over and over in your markup.
.cfix {

  &:after {
    clear: both;
    content: '';
    display: table;
  }

}

%cfix {

  &:after {
    clear: both;
    content: '';
    display: table;
  }

}

.no-padding {
  padding: 0 !important;
}

.no-padding-top {
  padding-top: 0 !important;
}

.no-padding-bottom {
  padding-bottom: 0 !important;
}

.no-padding-left {
  padding-left: 0 !important;
}

.no-padding-right {
  padding-right: 0 !important;
}

.no-margin {
  margin: 0 !important;
}

.no-margin-bottom {
  margin-bottom: 0 !important;
}

.img-responsive {
  width: 100%; // Fix for IE
}

.double-line-height:before {
  line-height: 2rem;
  content: " ";
  padding: 1px;
}

// Align content vericaly
.h-v-align {
  display: flex;
  align-items: center;
  justify-content: center;

  &__item--top {
    align-self: flex-start;
  }

  &__item--bottom {
    align-self: flex-end;
  }

}

// TODO: check if this hack is even needed
.relative {
  position: relative !important;
}

.row-equal-width {
  @include display-flex;

  > .equal-width {
    flex-basis: 100%;
  }

}

@media (min-width: $bootstrap-md-width) {

  .no-margin-md {
    margin: 0 !important;
  }

  .line-break-md {
    display: block;
  }

  // Same-height columns
  .same-height-cols {

    > .row {
      @include display-flex;
    }

    > .row > div[class*='col-'] {
      @include display-flex;
    }

  }

}

@media (max-width: $bootstrap-md-width - 1px) {

  .no-spacing-cols-mobile {
    margin: 0 -15px;
    padding: 0;
  }

  .no-spacing-fluid-cols-mobile {
    margin: 0 -30px;
    padding: 0;
  }

}

// Five Equal Columns
.col-xs-5ths, .col-sm-5ths, .col-md-5ths, .col-lg-5ths {
    position: relative;
    min-height: 1px;
    padding-right: 15px;
    padding-left: 15px;
}

.col-xs-5ths {
    width: 20%;
    float: left;
}

@media (min-width: $bootstrap-sm-width) {

  .col-sm-5ths {
      width: 20%;
      float: left;
  }

}
@media (min-width: $bootstrap-md-width) {

  .col-md-5ths {
      width: 20%;
      float: left;
  }

}
@media (min-width: $bootstrap-lg-width) {

  .col-lg-5ths {
      width: 20%;
      float: left;
  }

}
