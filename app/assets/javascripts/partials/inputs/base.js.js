// Generated by CoffeeScript 1.3.3
var BaseInput, ButtonsBoxSelector, ChosenSelector, CustomAndBaseColourSelector, CustomisationsSelector,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.inputs || (window.inputs = {});

window.inputs.BaseInput = BaseInput = (function() {

  function BaseInput() {
    this.listeners = {};
  }

  BaseInput.prototype.val = function(newValue) {
    if (arguments.length === 0) {
      return this.getValue();
    } else {
      this.setValue(newValue);
      return newValue;
    }
  };

  BaseInput.prototype.on = function(eventName, callback) {
    var _base;
    (_base = this.listeners)[eventName] || (_base[eventName] = []);
    return this.listeners[eventName].push(callback);
  };

  BaseInput.prototype.trigger = function(eventName) {
    var callback, callbacks, _i, _len, _results;
    callbacks = this.listeners[eventName] || [];
    _results = [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      callback = callbacks[_i];
      _results.push(callback());
    }
    return _results;
  };

  BaseInput.prototype.getValue = function() {
    return console.log('get value func is not defined');
  };

  BaseInput.prototype.setValue = function() {
    return console.log('set value func is not defined');
  };

  return BaseInput;

})();

window.inputs.ButtonsBoxSelector = ButtonsBoxSelector = (function(_super) {

  __extends(ButtonsBoxSelector, _super);

  ButtonsBoxSelector.prototype.container = null;

  ButtonsBoxSelector.prototype.buttons_selector = null;

  function ButtonsBoxSelector(container, buttons_selector) {
    this.container = container;
    this.buttons_selector = buttons_selector;
    ButtonsBoxSelector.__super__.constructor.call(this);
    _.bindAll(this, 'onButtonClickHandler');
    this.container.on('click', this.buttons_selector, this.onButtonClickHandler);
  }

  ButtonsBoxSelector.prototype.onButtonClickHandler = function(e) {
    e.preventDefault();
    $(e.target).siblings().removeClass('selected');
    $(e.target).addClass('selected');
    return this.trigger('change');
  };

  ButtonsBoxSelector.prototype.getValue = function() {
    var value;
    value = this.container.find("" + this.buttons_selector + ".selected:first").data('size');
    if (!_.isUndefined(value)) {
      return value;
    } else {
      return null;
    }
  };

  ButtonsBoxSelector.prototype.setValue = function(newValue) {
    var selectedButton;
    selectedButton = this.container.find("" + this.buttons_selector + "[data-size='" + newValue + "']");
    selectedButton.siblings().removeClass('selected').end().addClass('selected');
    return newValue;
  };

  return ButtonsBoxSelector;

})(BaseInput);

window.inputs.ChosenSelector = ChosenSelector = (function(_super) {

  __extends(ChosenSelector, _super);

  function ChosenSelector(container) {
    this.container = container;
    ChosenSelector.__super__.constructor.call(this);
    _.bindAll(this, 'onValueChanged');
    this.container.on('change', this.onValueChanged);
  }

  ChosenSelector.prototype.onValueChanged = function(e) {
    return this.trigger('change');
  };

  ChosenSelector.prototype.getValue = function() {
    var value;
    value = this.container.val();
    if (value) {
      return value;
    } else {
      return null;
    }
  };

  ChosenSelector.prototype.setValue = function(newValue) {
    return this.container.val(newValue).trigger('chosen:updated');
  };

  return ChosenSelector;

})(BaseInput);

window.inputs.CustomAndBaseColourSelector = CustomAndBaseColourSelector = (function(_super) {

  __extends(CustomAndBaseColourSelector, _super);

  function CustomAndBaseColourSelector(baseColourInput, customColourInput) {
    this.baseColourInput = baseColourInput;
    this.customColourInput = customColourInput;
    CustomAndBaseColourSelector.__super__.constructor.call(this);
    _.bindAll(this, 'onValueSelectedHandler');
    this.baseColourInput.on('change', this.onValueSelectedHandler);
    this.customColourInput.on('change', this.onValueSelectedHandler);
  }

  CustomAndBaseColourSelector.prototype.onValueSelectedHandler = function(e) {
    e.preventDefault();
    if ($(e.target).attr('id') === this.baseColourInput.attr('id')) {
      this.customColourInput.val('').trigger('chosen:updated');
    } else {
      this.baseColourInput.val('').trigger('chosen:updated');
    }
    return this.trigger('change');
  };

  CustomAndBaseColourSelector.prototype.getValue = function() {
    if (!_.isEmpty(this.customColourInput.val())) {
      return this.customColourInput.val();
    } else if (!_.isEmpty(this.baseColourInput.val())) {
      return this.baseColourInput.val();
    } else {
      return '';
    }
  };

  CustomAndBaseColourSelector.prototype.setValue = function(newValue) {
    this.baseColourInput.val(newValue).trigger('chosen:updated');
    if (_.isEmpty(this.baseColourInput.val())) {
      this.customColourInput.val(newValue).trigger('chosen:updated');
    }
    return newValue;
  };

  CustomAndBaseColourSelector.prototype.isCustomColour = function() {
    return _.isEmpty(this.baseColourInput.val()) && !_.isEmpty(this.customColourInput.val());
  };

  return CustomAndBaseColourSelector;

})(BaseInput);

window.inputs.CustomisationsSelector = CustomisationsSelector = (function(_super) {

  __extends(CustomisationsSelector, _super);

  function CustomisationsSelector(container) {
    this.container = container;
    CustomisationsSelector.__super__.constructor.call(this);
    _.bindAll(this, 'onAddProductButtonClickHandler');
    this.container.on('click', '.btn.empty.border', this.onAddProductButtonClickHandler);
  }

  CustomisationsSelector.prototype.onAddProductButtonClickHandler = function(e) {
    var valueContainer;
    e.preventDefault();
    valueContainer = $(e.currentTarget).closest('.customisation-value');
    valueContainer.toggleClass('selected');
    CustomisationsSelector.syncLabelsWithSelectionState(valueContainer);
    this.trigger('change');
  };

  CustomisationsSelector.prototype.getValue = function() {
    return _.map(this.container.find('.customisation-value.selected'), function(item) {
      return $(item).data('customisation-value-id').toString();
    }, this);
  };

  CustomisationsSelector.prototype.setValue = function(newValues) {
    if (!_.isArray(newValues)) {
      return _.each(this.container.find('.customisation-value.selected'), function(item) {
        return CustomisationsSelector.syncLabelsWithSelectionState($(item).removeClass('selected'));
      });
    } else {
      this.container.find('.customisation-value.selected').removeClass('selected');
      _.each(newValues, function(id) {
        return this.container.find(".customisation-value[data-customisation-value-id=" + id).addClass('selected');
      }, this);
      return _.each(this.container.find(".customisation-value"), CustomisationsSelector.syncLabelsWithSelectionState);
    }
  };

  CustomisationsSelector.syncLabelsWithSelectionState = function(valueContainer) {
    var button;
    button = valueContainer.find('.btn.empty.border');
    if (valueContainer.is('.selected')) {
      return button.html('ADDED');
    } else {
      return button.html(' + ADD');
    }
  };

  return CustomisationsSelector;

})(BaseInput);
