// Generated by CoffeeScript 1.3.3
var BaseInput, ButtonsBoxSelector, ChosenSelector, CustomAndBaseColourSelector, CustomisationsSelector,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.inputs || (window.inputs = {});

window.inputs.BaseInput = BaseInput = (function() {

  function BaseInput() {
    this.listeners = {};
  }

  BaseInput.prototype.val = function(newValue) {
    if (arguments.length === 0) {
      return this.getValue();
    } else {
      this.setValue(newValue);
      return newValue;
    }
  };

  BaseInput.prototype.on = function(eventName, callback) {
    var _base;
    (_base = this.listeners)[eventName] || (_base[eventName] = []);
    return this.listeners[eventName].push(callback);
  };

  BaseInput.prototype.trigger = function(eventName) {
    var callback, callbacks, _i, _len, _results;
    callbacks = this.listeners[eventName] || [];
    _results = [];
    for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
      callback = callbacks[_i];
      _results.push(callback());
    }
    return _results;
  };

  BaseInput.prototype.getValue = function() {
    return console.log('get value func is not defined');
  };

  BaseInput.prototype.setValue = function() {
    return console.log('set value func is not defined');
  };

  return BaseInput;

})();

window.inputs.ButtonsBoxSelector = ButtonsBoxSelector = (function(_super) {
  var easing_time;

  __extends(ButtonsBoxSelector, _super);

  ButtonsBoxSelector.prototype.container = null;

  ButtonsBoxSelector.prototype.buttons_selector = null;

  easing_time = 380;

  function ButtonsBoxSelector(container, buttons_selector) {
    this.container = container;
    this.buttons_selector = buttons_selector;
    ButtonsBoxSelector.__super__.constructor.call(this);
    _.bindAll(this, 'onButtonClickHandler');
    this.container.on('click', this.buttons_selector, this.onButtonClickHandler);
    this.makeDropdown(this.container);
  }

  ButtonsBoxSelector.prototype.onButtonClickHandler = function(e) {
    e.preventDefault();
    $(e.target).closest('.sizebox').find('.button').removeClass('selected');
    $(e.target).addClass('selected');
    this.container.find('.dropdown-content').fadeOut(easing_time);
    this.trigger('change');
    return this.closeDropdown(this.container.find('.dropdown-button'), this.container.find('.dropdown-content'));
  };

  ButtonsBoxSelector.prototype.getValue = function() {
    var value;
    value = this.container.find("" + this.buttons_selector + ".selected:first").data('size');
    if (!_.isUndefined(value)) {
      return value;
    } else {
      return null;
    }
  };

  ButtonsBoxSelector.prototype.setValue = function(newValue) {
    var selectedButton;
    selectedButton = this.container.find("" + this.buttons_selector + "[data-size='" + newValue + "']");
    selectedButton.closest('.sizebox').find('.button').removeClass('selected').end().addClass('selected');
    return newValue;
  };

  ButtonsBoxSelector.prototype.makeDropdown = function(container) {
    this.container = container;
    this.container.find('.dropdown-size').wrapAll('<div class="dropdown-content"></div>');
    return this.bindDropdown(this.container.find('.dropdown-button'), this.container.find('.dropdown-content'));
  };

  ButtonsBoxSelector.prototype.bindDropdown = function(button, dropdown) {
    var _this = this;
    button.on('click', this.toggleDropdown);
    return dropdown.on('mouseleave', function() {
      return _this.closeDropdown(button, dropdown);
    });
  };

  ButtonsBoxSelector.prototype.toggleDropdown = function() {
    var $this;
    $this = $(this);
    $this.text($.trim($this.text()) === $this.data('close') ? $this.data('open') : $this.data('close'));
    return $this.toggleClass('selected').next('.dropdown-content').toggle();
  };

  ButtonsBoxSelector.prototype.closeDropdown = function(button, dropdown) {
    if (button.is('.selected')) {
      dropdown.fadeOut(easing_time);
      return button.removeClass('selected').text('+');
    }
  };

  return ButtonsBoxSelector;

})(BaseInput);

window.inputs.ChosenSelector = ChosenSelector = (function(_super) {

  __extends(ChosenSelector, _super);

  function ChosenSelector(container, valueType) {
    this.container = container;
    this.valueType = valueType != null ? valueType : 'string';
    ChosenSelector.__super__.constructor.call(this);
    _.bindAll(this, 'onValueChanged');
    this.container.on('change', this.onValueChanged);
  }

  ChosenSelector.prototype.onValueChanged = function(e) {
    return this.trigger('change');
  };

  ChosenSelector.prototype.getValue = function() {
    return this.prepareValue(this.container.val());
  };

  ChosenSelector.prototype.setValue = function(newValue) {
    return this.container.val(newValue).trigger('chosen:updated');
  };

  ChosenSelector.prototype.prepareValue = function(value) {
    if (_.isUndefined(value)) {
      return null;
    } else if (this.valueType === 'integer') {
      return parseInt(value);
    } else {
      return value;
    }
  };

  return ChosenSelector;

})(BaseInput);

window.inputs.CustomAndBaseColourSelector = CustomAndBaseColourSelector = (function(_super) {

  __extends(CustomAndBaseColourSelector, _super);

  function CustomAndBaseColourSelector(baseColourInput, customColourInput) {
    this.baseColourInput = baseColourInput;
    this.customColourInput = customColourInput;
    CustomAndBaseColourSelector.__super__.constructor.call(this);
    _.bindAll(this, 'onValueSelectedHandler');
    this.baseColourInput.on('change', this.onValueSelectedHandler);
    this.customColourInput.on('change', this.onValueSelectedHandler);
  }

  CustomAndBaseColourSelector.prototype.onValueSelectedHandler = function(e) {
    e.preventDefault();
    if ($(e.target).attr('id') === this.baseColourInput.attr('id')) {
      this.customColourInput.val('').trigger('chosen:updated');
    } else {
      this.baseColourInput.val('').trigger('chosen:updated');
    }
    return this.trigger('change');
  };

  CustomAndBaseColourSelector.prototype.getValue = function() {
    if (!_.isEmpty(this.customColourInput.val())) {
      return this.customColourInput.val();
    } else if (!_.isEmpty(this.baseColourInput.val())) {
      return this.baseColourInput.val();
    } else {
      return '';
    }
  };

  CustomAndBaseColourSelector.prototype.setValue = function(newValue) {
    this.baseColourInput.val(newValue).trigger('chosen:updated');
    if (_.isEmpty(this.baseColourInput.val())) {
      this.customColourInput.val(newValue).trigger('chosen:updated');
    }
    return newValue;
  };

  CustomAndBaseColourSelector.prototype.isCustomColour = function() {
    return _.isEmpty(this.baseColourInput.val()) && !_.isEmpty(this.customColourInput.val());
  };

  return CustomAndBaseColourSelector;

})(BaseInput);

window.inputs.CustomisationsSelector = CustomisationsSelector = (function(_super) {

  __extends(CustomisationsSelector, _super);

  CustomisationsSelector.prototype.allValuesIds = [];

  function CustomisationsSelector(container, incompatibility_map) {
    this.container = container;
    this.incompatibility_map = incompatibility_map;
    CustomisationsSelector.__super__.constructor.call(this);
    _.bindAll(this, 'onAddProductButtonClickHandler');
    this.container.on('click', '.customisation-value .btn.empty.border', this.onAddProductButtonClickHandler);
    this.allValuesIds = _.map(this.container.find('.customisation-value'), function(item) {
      return $(item).data('customisation-value-id');
    });
  }

  CustomisationsSelector.prototype.onAddProductButtonClickHandler = function(e) {
    var valueContainer, value_id;
    e.preventDefault();
    valueContainer = $(e.currentTarget).closest('.customisation-value');
    if (valueContainer.is('.unavailable')) {
      return;
    }
    valueContainer.toggleClass('selected');
    value_id = valueContainer.data('customisation-value-id');
    if (valueContainer.is('.selected')) {
      this.updateValuesContainer(value_id, 'selected');
    } else {
      this.updateValuesContainer(value_id, 'available');
    }
    this.updateIncompatibility();
    this.trigger('change');
  };

  CustomisationsSelector.prototype.getValue = function() {
    return _.map(this.container.find('.customisation-value.selected'), function(item) {
      return parseInt($(item).data('customisation-value-id'));
    }, this);
  };

  CustomisationsSelector.prototype.setValue = function(newValues) {
    this.updateValuesContainer(this.allValuesIds, 'available');
    if (_.isArray(newValues)) {
      return this.updateValuesContainer(newValues, 'selected');
    }
  };

  CustomisationsSelector.prototype.updateIncompatibility = function() {
    var available_items, incompatible_items, selected_items;
    selected_items = this.getValue();
    incompatible_items = _.map(selected_items, function(item_id) {
      return this.incompatibility_map[item_id] || [];
    }, this);
    incompatible_items = _.union.apply(this, incompatible_items);
    available_items = _.difference(this.allValuesIds, selected_items, incompatible_items);
    this.updateValuesContainer(incompatible_items, 'incompatible');
    return this.updateValuesContainer(available_items, 'available');
  };

  CustomisationsSelector.prototype.updateValuesContainer = function(value_ids, new_state) {
    if (!_.isArray(value_ids)) {
      value_ids = [value_ids];
    }
    return _.each(value_ids, function(value_id) {
      return this.updateValueContainer(value_id, new_state);
    }, this);
  };

  CustomisationsSelector.prototype.updateValueContainer = function(value_id, new_state) {
    var $button, $valueContainer;
    $valueContainer = this.container.find(".customisation-value[data-customisation-value-id=" + value_id + "]");
    $button = $valueContainer.find('.btn.empty.border');
    if (new_state === 'selected') {
      $valueContainer.addClass('selected').removeClass('unavailable');
      return $button.html('ADDED');
    } else if (new_state === 'available') {
      $valueContainer.removeClass('selected').removeClass('unavailable');
      return $button.html('+ ADD');
    } else if (new_state === 'incompatible') {
      $valueContainer.removeClass('selected').addClass('unavailable');
      return $button.html('NOT COMPATIBLE');
    }
  };

  return CustomisationsSelector;

})(BaseInput);
