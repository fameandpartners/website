.pages.wrapper.wrapper-content
  = form_for render3d_image, :url => {:action => action}, method: method, html: {class: 'form-horizontal'} do |f|
    .ibox.float-e-margins
      .ibox-title
        h5 Add new render3d image to the product
      .ibox-content
        .form-group
          label.col-sm-2.control-label Product
          .col-sm-10 = f.collection_select :product_id, products, :id, :name_with_sku, { include_blank: true }, { class: 'remote-select', id: 'product' }
        .form-group
          label.col-sm-2.control-label Color Value
          .col-sm-10 = f.collection_select :color_value_id, [], :id, :name, { include_blank: true }, { class: 'remote-select', id: 'color_value' }
        .form-group
          label.col-sm-2.control-label Customisation Value
          .col-sm-10 = f.collection_select :customisation_value_id, [], :id, :name, { include_blank: true }, { class: 'remote-select', id: 'customisation_value' }
        .form-group
          label.col-sm-2.control-label Attachment
          .col-sm-10 = f.file_field :attachment
        - unless render3d_image.new_record?
          .form-group
            label.col-sm-2.control-label Preview
            .col-sm-10 = image_tag render3d_image.attachment.url
        .form-group
          .col-sm-2
          .col-sm-10
            = f.submit (render3d_image.new_record? ? 'Create' : 'Update'), class: 'btn btn-primary'

javascript:
  (function($) { 'use strict';
    var initialAttrs = #{raw initial_attrs.to_json};
    var optionValuesPath = '#{option_values_customisation_render3d_images_path('')}';

    var makeSelectChosen = function($select, data, isDisabled, initialValue) {
      if (data) {
        $select
          .chosen('destroy')
          .html($('<option>'));

        $.each(data, function(i, option) {
          $select.append($('<option/>', {
            value: option.id,
            text:  option.text
          }));
        });
      }

      if (initialValue != undefined) {
        $select.val(initialValue.id);
      }

      $select
        .prop('disabled', !!isDisabled)
        .chosen({ width: '100%' });
    };

    var populateChosenSelect = function(i, select) {
      var $select = $(select),
          id = $select.attr('id'),
          productId = $('#product').val(),
          initialValue = this[id];

      $.get(`${optionValuesPath}${productId}.json`)
        .then(function(data) {
          makeSelectChosen($select, data[id], false, initialValue);
        });
    };

    makeSelectChosen($('.remote-select#product'));

    $('.remote-select#product')
      .on('change', function() {
        $('#color_value,#customisation_value').each(populateChosenSelect);
      });


    if ($.isEmptyObject(initialAttrs)) {
      makeSelectChosen($('#color_value,#customisation_value'), null, true);
    } else {
      $('#color_value,#customisation_value').each(populateChosenSelect.bind(initialAttrs));
    }
  })(jQuery);
