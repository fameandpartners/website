version: 2
jobs:
  build:
    # TODO consider memcached
    docker:
      - image: circleci/ruby:2.3-stretch-node-browsers
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: root
      - image: circleci/postgres:9.6.6
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle-test_test
      - image: redis
      - image: docker.elastic.co/elasticsearch/elasticsearch:6.3.1
      - image: circleci/python:3.7.2

    working_directory: ~/repo

    steps:
      - run:
          name: Test Python
          command: |
            
            whereis python3
            
      # - run:
          # name: Git LFS Install
          # command: |
            # curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            # sudo apt-get install -yqq git-lfs

      # # - run:
      # #     name: Phantomjs Install
      # #     command: |
      # #       sudo curl --output /usr/local/bin/phantomjs https://s3.amazonaws.com/circle-downloads/phantomjs-2.1.1
      # #       sudo chmod ugo+x /usr/local/bin/phantomjs

      # - add_ssh_keys:
          # fingerprints:
            # - "f4:3c:4d:18:65:f8:22:32:a7:57:f5:c4:ae:09:18:06"
            
      # - checkout

      # - run:
          # name: Git LFS pull
          # command: |
            # git lfs install
            # git lfs pull

      # - restore_cache:
          # keys:
            # - rails-bundle-v2-{{ checksum "Gemfile.lock" }}
            # - rails-bundle-v2-

      # - run:
          # name: Bundle Install
          # command: bundle check || bundle install

      # - save_cache:
          # key: rails-bundle-v2-{{ checksum "Gemfile.lock" }}
          # paths:
            # - vendor/bundle

      # - run:
          # name: Wait for DB
          # command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # - run:
          # name: Database setup
          # command: |
            # echo "test:
             # adapter: postgresql
             # database: circle-test_test
             # username: root
             # host: localhost
            # " > config/database.yml

            # bundle exec rake db:create db:schema:load db:migrate --trace

      # - run:
          # name: Run rspec in parallel
          # command: |
            # bundle exec rspec --profile 10 \
                              # --format RspecJunitFormatter \
                              # --out test_results/rspec.xml \
                              # --format progress \
                              # $(circleci tests glob "spec/**/*_spec.rb engines/*/spec/**/*_spec.rb spec/**/*.feature engines/*/spec/**/*.feature" | circleci tests split --split-by=timings)

      # - store_test_results:
          # path: test_results

      # - setup_remote_docker:
          # docker_layer_caching: true
          # version: 17.09.0-ce

      # - run:
          # name: Install docker client
          # command: |
            # set -x
            # VER="17.09.0-ce"
            # curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            # tar -x -C /tmp -f /tmp/docker-$VER.tgz
            # sudo mv /tmp/docker/* /usr/bin

      # # - run: |
          # # VERSION=${CIRCLE_BRANCH/\//-}.$CIRCLE_BUILD_NUM

          # # sudo apt-get update -qq
          # # sudo apt-get install -qq python python-pip libpython-dev
          # # sudo pip install awscli

          # # rm config/database.yml
          # # ./.circleci/build-docker.sh $VERSION

          # # if [[ $CIRCLE_BRANCH =~ ^release1 ]]; then
            # # aws elasticbeanstalk update-environment --environment-name "Spree-QA1" --version-label $VERSION
            # # aws elasticbeanstalk update-environment --environment-name "Spree-QA1-Sidekiq" --version-label $VERSION
          # # elif [[ $CIRCLE_BRANCH =~ ^release2 ]]; then
            # # aws elasticbeanstalk update-environment --environment-name "Spree-QA2" --version-label $VERSION
          # # elif [[ $CIRCLE_BRANCH =~ ^release3 ]]; then
            # # aws elasticbeanstalk update-environment --environment-name "Spree-QA3" --version-label $VERSION
          # # elif [[ $CIRCLE_BRANCH =~ ^develop$ ]]; then
            # # aws elasticbeanstalk update-environment --environment-name "Spree-QA4" --version-label $VERSION
            # # aws elasticbeanstalk update-environment --environment-name "Spree-QA4-Sidekiq" --version-label $VERSION
          # # elif [[ $CIRCLE_BRANCH =~ ^staging$ ]]; then
            # # aws elasticbeanstalk update-environment --environment-name "Spree-Staging" --version-label $VERSION
          # # elif [[ $CIRCLE_BRANCH =~ ^master$ ]]; then
            # # aws elasticbeanstalk update-environment --environment-name "Spree-Prod" --version-label $VERSION
            # # aws elasticbeanstalk update-environment --environment-name "Spree-Prod-Sidekiq" --version-label $VERSION
          # # fi
          
      # - run:
          # name: download test codes
          # command: |   
            # cd /home/circleci/
            # git clone -b product https://github.com/fameandpartners/FPWebsiteTest.git
            
      # - run:
          # name: install testframework dependencies
          # command: |
            # sudo apt-get install python3-venv
            # sudo python3 -m venv /home/circleci/FPWebsiteTest/venv
            # . /home/circleci/FPWebsiteTest/venv/bin/activate
            # sudo /home/circleci/FPWebsiteTest/venv/bin/pip3 install -r /home/circleci/FPWebsiteTest/requirements.txt
            
      # - save_cache:
          # paths:
            # - ./venv
          # key: v1-dependencies-{{ checksum "/home/circleci/FPWebsiteTest/requirements.txt" }}
          
      # - run:
          # name: run tests
          # command: |
            # . /home/circleci/FPWebsiteTest/venv/bin/activate
            # chmod 777 /home/circleci/FPWebsiteTest/apps/FPwebsiteTest/src/function/phantomjs
            # sudo /home/circleci/FPWebsiteTest/venv/bin/python3 /home/circleci/FPWebsiteTest/testframework/TestCaseManager.py
            # deactivate
            
      # - run:
          # name: Send Success Slack Notification
          # command: |
            # if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # COMMITMESSAGE=`git log --format="%s" -n 1 $CIRCLE_SHA1`
              # COMMITUSER=`git log -1 --pretty=format:'%an'`
              # COMMITURL="https://github.com/fameandpartners/website/commit/${CIRCLE_SHA1}"
              # curl -X POST -H 'Content-type: application/json' --data "{'text':'*Spree (${CIRCLE_BRANCH}) : ${COMMITUSER}* \n ${COMMITMESSAGE}', 'mrkdwn': true, 'unfurl_links': false, 'attachments': [ { 'fallback': 'View commit at ${COMMITURL}', 'actions': [ { 'type': 'button', 'text': 'View', 'url': '${COMMITURL}' } ] } ] }" https://hooks.slack.com/services/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
            # fi
          # when: on_success

      # - run:
          # name: Send Sentry Notification
          # command: |
            # if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # # Alert Sentry about deploy
              # sentry_endpoint='https://app.getsentry.com/api/hooks'
              # curl ${sentry_endpoint}/release/builtin/${SENTRY_PUBLIC_KEY}/${SENTRY_PRIVATE_KEY}/ \
              # -X POST \
              # -H "Content-Type: application/json" \
              # -d "{\"version\": \"${CIRCLE_SHA1}\"}"
            # fi

      # - run:
          # name: Send Success Slack Notification
          # command: |
            # if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # curl -X POST -H 'Content-type: application/json' --data "{'text':'*Spree (${CIRCLE_BRANCH}) : ${COMMITUSER}* \n Build Failed'}" https://hooks.slack.com/services/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
            # fi
          # when: on_fail
