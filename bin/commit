#!/usr/bin/env ruby
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples.  The first comments out the
# "Conflicts:" part of a merge commit.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.
$status = ''
$message = ''
$issue_type = ''
$github_issue = ''
$jira_issue = ''


STATUSES = {
  '1'=> '#in progress',
  '2'=> '#review',
  '3'=> '#ready'
}

def get_input()
  input = gets.chomp.downcase
  puts ''
  input
end

def malformed_branch?()
  branch = %x( git branch | grep '*' ).tr('* ', '')
  $issue_type, $github_issue, $jira_issue = branch.split(/\//)
  puts $issue_type
  puts $github_issue
  puts $jira_issue
  if $issue_type.nil? || $github_issue.nil? || $jira_issue.nil?
    malformed_branch_text(branch)
    return true
  end
end

def malformed_branch_text(branch)
  puts '*' * 80
  puts "*WARNING* [POLICY] Your branch, '#{branch.strip}', is a malformed branch name."
  puts "To avoid annoying additional questions in the future, please follow the branch convention:"
  puts "<TYPE>/<Github Issue Number>/<Jira Issue Number>/<branch-name>"
  puts ""
  puts "For example: 'feature/123/WEBSITE-1230/landing-page'"
  puts '*' * 80
  puts ""
  puts ""
end

def unrecognized
  puts 'Unrecognized Input, Try Again...'
  puts ''
end

def commit_message_prompt
  puts "Commit message:"
  $message = get_input
end

def status_change_prompt
  puts "Does this require a Jira status change? (y/n):"
  input = get_input
  case input
    when 'y'
      select_status_prompt
  end
end

def select_status_prompt
  puts "Status Codes"
  puts "*" * 15
  puts "[1] In Progress"
  puts "[2] Needs Review"
  puts "[3] Ready for Testing"
  puts "[c] or cancel"
  puts "-" * 15

  input = get_input
  case input
  when '1', '2', '3'
    $status = STATUSES[input]
  when 'c'
    return
  else
    unrecognized
    select_status_prompt
  end
end

def additional_questions_prompt
  github_issue_prompt
  jira_issue_prompt
end

def github_issue_prompt
  puts "What is the GITHUB issue number for this branch?:"
  input = get_input.to_i
  $github_issue = input == 0 ? '' : input
end

def jira_issue_prompt
  puts "What is the JIRA issue for this branch?:"
  input = get_input.upcase
  $jira_issue = input if input.include? 'WEBSITE-'
end

def main
  commit_message_prompt
  status_change_prompt
  if malformed_branch?
    additional_questions_prompt
  end

  commit_message = "[#{$jira_issue.strip}] ##{$github_issue.strip} #{$message.strip} #{$status.strip}"
  %x( git commit -m #{commit_message})
  exit 1
end

main
